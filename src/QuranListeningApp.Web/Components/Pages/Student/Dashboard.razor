@page "/student/dashboard"
@layout StudentLayout
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Student")]
@using QuranListeningApp.Application.Services
@using QuranListeningApp.Domain.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject ListeningSessionService SessionService
@inject UserService UserService
@inject ISurahReferenceRepository SurahRepository
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="page-container">
    <div class="page-header">
        <h2>ŸÑŸàÿ≠ÿ© ÿßŸÑÿ∑ÿßŸÑÿ®</h2>
    </div>

    @if (isLoading)
    {
        <div class="loading">ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</div>
    }
    else
    {
        <div class="welcome-card">
            <h3>ŸÖÿ±ÿ≠ÿ®ÿßŸã @studentName</h3>
            @if (!string.IsNullOrEmpty(gradeLevel))
            {
                <p class="grade">ÿßŸÑÿµŸÅ: @gradeLevel</p>
            }
        </div>

        <div class="navigation-section">
            <a href="/student/reports" class="nav-button reports">
                <div class="nav-icon">üìä</div>
                <div class="nav-content">
                    <div class="nav-title">ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿ™ŸÅÿµŸäŸÑŸäÿ©</div>
                    <div class="nav-subtitle">ÿπÿ±ÿ∂ ÿ™ŸÇÿ±Ÿäÿ± ÿ¥ÿßŸÖŸÑ ÿπŸÜ ÿ£ÿØÿßÿ¶ŸÉ</div>
                </div>
            </a>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">@totalSessions</div>
                <div class="stat-label">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™</div>
            </div>
            <div class="stat-card success">
                <div class="stat-value">@passedSessions</div>
                <div class="stat-label">ÿßÿ¨ÿ™ÿ≤ÿ™</div>
            </div>
            <div class="stat-card error">
                <div class="stat-value">@failedSessions</div>
                <div class="stat-label">ŸÑŸÖ ÿ™ÿ¨ÿ™ÿ≤</div>
            </div>
        </div>

        @if (recentSessions.Any())
        {
            <div class="section">
                <h3>ÿ¢ÿÆÿ± ÿ¨ŸÑÿ≥ÿßÿ™Ÿä</h3>
                <div class="session-list">
                    @foreach (var session in recentSessions)
                    {
                        <div class="session-card">
                            <div class="session-header">
                                <span class="session-date">@session.SessionDate.ToString("yyyy-MM-dd")</span>
                                @if (session.IsCompleted)
                                {
                                    <span class="badge-passed">‚úì ÿßÿ¨ÿ™ÿ≤ÿ™</span>
                                }
                                else
                                {
                                    <span class="badge-failed">‚úó ŸÑŸÖ ÿ£ÿ¨ÿ™ÿ≤</span>
                                }
                            </div>
                            <div class="session-info">
                                <div class="info-item">
                                    <span class="label">ÿßŸÑÿ≥Ÿàÿ±ÿ©:</span>
                                    <span class="value">@GetSurahName(session.SurahNumber)</span>
                                </div>
                                <div class="info-item">
                                    <span class="label">ÿßŸÑÿ¢Ÿäÿßÿ™:</span>
                                    <span class="value">@session.FromAyahNumber - @session.ToAyahNumber</span>
                                </div>
                            </div>
                            @if (session.MajorErrorsCount > 0 || session.MinorErrorsCount > 0)
                            {
                                <div class="errors-row">
                                    @if (session.MajorErrorsCount > 0)
                                    {
                                        <span class="error-badge major">ŸÑÿ≠ŸÜ ÿ¨ŸÑŸä: @session.MajorErrorsCount</span>
                                    }
                                    @if (session.MinorErrorsCount > 0)
                                    {
                                        <span class="error-badge minor">ŸÑÿ≠ŸÜ ÿÆŸÅŸä: @session.MinorErrorsCount</span>
                                    }
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(session.Notes))
                            {
                                <div class="notes">
                                    <strong>ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:</strong> @session.Notes
                                </div>
                            }
                            <div class="teacher-info">
                                ÿßŸÑŸÖÿπŸÑŸÖ: @session.Teacher?.FullNameArabic
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìñ</div>
                <p>ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ¨ŸÑÿ≥ÿßÿ™ ÿ®ÿπÿØ</p>
            </div>
        }
    }
</div>

<style>
    .page-container {
        padding: 16px;
        max-width: 600px;
        margin: 0 auto;
        text-align: end;
    }

    .page-header h2 {
        margin: 0 0 20px 0;
        color: #333;
        font-size: 24px;
    }

    .loading {
        text-align: center;
        padding: 40px;
        color: #666;
    }

    .welcome-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 24px;
        border-radius: 12px;
        margin-bottom: 20px;
        text-align: center;
    }

    .welcome-card h3 {
        margin: 0 0 8px 0;
        font-size: 20px;
    }

    .welcome-card .grade {
        margin: 0;
        opacity: 0.9;
        font-size: 14px;
    }

    .navigation-section {
        margin-bottom: 24px;
    }

    .nav-button {
        display: flex;
        align-items: center;
        background: white;
        border-radius: 12px;
        padding: 16px;
        text-decoration: none;
        color: inherit;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        gap: 16px;
    }

    .nav-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        text-decoration: none;
        color: inherit;
    }

    .nav-button.reports {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
    }

    .nav-icon {
        font-size: 24px;
        min-width: 40px;
        text-align: center;
    }

    .nav-content {
        flex: 1;
        text-align: start;
    }

    .nav-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 4px;
    }

    .nav-subtitle {
        font-size: 12px;
        opacity: 0.9;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .stat-card.success {
        background: #e8f5e9;
    }

    .stat-card.error {
        background: #ffebee;
    }

    .stat-value {
        font-size: 32px;
        font-weight: bold;
        color: #333;
        margin-bottom: 8px;
    }

    .stat-card.success .stat-value {
        color: #4caf50;
    }

    .stat-card.error .stat-value {
        color: #f44336;
    }

    .stat-label {
        font-size: 13px;
        color: #666;
    }

    .section {
        margin-bottom: 24px;
    }

    .section h3 {
        margin: 0 0 12px 0;
        color: #333;
        font-size: 18px;
    }

    .session-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .session-card {
        background: white;
        padding: 16px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .session-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .session-date {
        font-weight: 600;
        color: #333;
        font-size: 14px;
    }

    .badge-passed {
        background: #4caf50;
        color: white;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .badge-failed {
        background: #f44336;
        color: white;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .session-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        margin-bottom: 8px;
    }

    .info-item {
        font-size: 13px;
    }

    .info-item .label {
        color: #666;
    }

    .info-item .value {
        color: #333;
        font-weight: 500;
    }

    .errors-row {
        display: flex;
        gap: 8px;
        margin-bottom: 8px;
    }

    .error-badge {
        padding: 4px 10px;
        border-radius: 8px;
        font-size: 12px;
        font-weight: 600;
    }

    .error-badge.major {
        background: #ffebee;
        color: #c62828;
    }

    .error-badge.minor {
        background: #fff3e0;
        color: #ef6c00;
    }

    .notes {
        background: #f9f9f9;
        padding: 10px;
        border-radius: 8px;
        font-size: 13px;
        color: #666;
        margin-bottom: 8px;
        line-height: 1.5;
    }

    .teacher-info {
        font-size: 12px;
        color: #667eea;
        padding-top: 8px;
        border-top: 1px solid #f0f0f0;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
    }

    .empty-icon {
        font-size: 64px;
        margin-bottom: 16px;
        opacity: 0.5;
    }

    .empty-state p {
        color: #999;
        margin: 0;
    }
</style>

@code {
    private bool isLoading = true;
    private string studentName = "";
    private string gradeLevel = "";
    private int totalSessions = 0;
    private int passedSessions = 0;
    private int failedSessions = 0;
    private List<Domain.Entities.ListeningSession> recentSessions = new();
    private List<Domain.Entities.SurahReference> surahs = new();
    private Guid currentStudentId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentStudentId = Guid.Parse(authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? Guid.Empty.ToString());
        
        // Check if student has accepted the pledge
        var hasAcceptedPledge = await UserService.HasAcceptedPledgeAsync(currentStudentId);
        if (!hasAcceptedPledge)
        {
            Navigation.NavigateTo("/student/accept-pledge", true);
            return;
        }
        
        studentName = authState.User.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ?? "";

        surahs = (await SurahRepository.GetAllAsync()).OrderBy(s => s.SurahNumber).ToList();
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;

        var allSessions = await SessionService.GetAllSessionsAsync();
        var mySessions = allSessions.Where(s => s.StudentUserId == currentStudentId).ToList();

        totalSessions = mySessions.Count;
        passedSessions = mySessions.Count(s => s.IsCompleted);
        failedSessions = totalSessions - passedSessions;

        recentSessions = mySessions.OrderByDescending(s => s.SessionDate).Take(10).ToList();

        isLoading = false;
    }

    private string GetSurahName(int surahNumber)
    {
        var surah = surahs.FirstOrDefault(s => s.SurahNumber == surahNumber);
        return surah != null ? $"{surah.SurahNameArabic} ({surahNumber})" : $"ÿ≥Ÿàÿ±ÿ© {surahNumber}";
    }
}
