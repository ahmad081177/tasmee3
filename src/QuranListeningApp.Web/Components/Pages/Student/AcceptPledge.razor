@page "/student/accept-pledge"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using QuranListeningApp.Application.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize(Roles = "Student")]
@inject AppSettingsService SettingsService
@inject UserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>قبول الميثاق</PageTitle>

<div class="pledge-container">
    <div class="pledge-card">
        <div class="pledge-header">
            <h2>الميثاق الطلابي</h2>
            <p class="subtitle">يجب قبول الميثاق للمتابعة</p>
        </div>

        <div class="pledge-content">
            <div class="pledge-text">
                @((MarkupString)pledgeText.Replace("\n", "<br/>"))
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-error">@errorMessage</div>
        }

        <div class="pledge-footer">
            <div class="checkbox-container">
                <label class="checkbox-label">
                    <input type="checkbox" @bind="isAccepted" />
                    <span>أقر بأنني قرأت الميثاق وأوافق على جميع بنوده</span>
                </label>
            </div>

            <button class="btn-accept" @onclick="HandleAcceptPledge" disabled="@(!isAccepted || isProcessing)">
                @if (isProcessing)
                {
                    <span>جاري المعالجة...</span>
                }
                else
                {
                    <span>قبول والمتابعة</span>
                }
            </button>
        </div>
    </div>
</div>

<style>
    .pledge-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        direction: rtl;
    }

    .pledge-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
        max-width: 700px;
        width: 100%;
        overflow: hidden;
    }

    .pledge-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .pledge-header h2 {
        margin: 0 0 10px 0;
        font-size: 28px;
        font-weight: 700;
    }

    .subtitle {
        margin: 0;
        font-size: 16px;
        opacity: 0.95;
    }

    .pledge-content {
        padding: 30px;
        max-height: 500px;
        overflow-y: auto;
    }

    .pledge-text {
        line-height: 2;
        font-size: 16px;
        color: #333;
        white-space: pre-wrap;
        text-align: right;
        direction: rtl;
    }

    .pledge-footer {
        padding: 20px 30px 30px 30px;
        border-top: 1px solid #e0e0e0;
    }

    .checkbox-container {
        margin-bottom: 20px;
    }

    .checkbox-label {
        display: flex;
        align-items: flex-start;
        cursor: pointer;
        font-size: 16px;
        color: #333;
        gap: 12px;
    }

    .checkbox-label input[type="checkbox"] {
        width: 20px;
        height: 20px;
        margin-top: 2px;
        cursor: pointer;
        flex-shrink: 0;
    }

    .checkbox-label span {
        flex: 1;
        line-height: 1.5;
    }

    .btn-accept {
        width: 100%;
        padding: 15px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 18px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-accept:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }

    .btn-accept:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
    }

    .alert-error {
        background-color: #fee;
        color: #c33;
        border: 1px solid #fcc;
        padding: 12px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
        text-align: center;
    }

    /* Scrollbar styling */
    .pledge-content::-webkit-scrollbar {
        width: 8px;
    }

    .pledge-content::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .pledge-content::-webkit-scrollbar-thumb {
        background: #667eea;
        border-radius: 4px;
    }

    .pledge-content::-webkit-scrollbar-thumb:hover {
        background: #5568d3;
    }

    @@media (max-width: 768px) {
        .pledge-card {
            margin: 10px;
        }

        .pledge-header h2 {
            font-size: 24px;
        }

        .pledge-text {
            font-size: 14px;
        }

        .btn-accept {
            font-size: 16px;
        }
    }
</style>

@code {
    private string pledgeText = "";
    private bool isAccepted = false;
    private bool isProcessing = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Load pledge text
        pledgeText = await SettingsService.GetPledgeTextAsync();

        // Check if already accepted (redirect if so)
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = Guid.Parse(authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? Guid.Empty.ToString());

        var hasAccepted = await UserService.HasAcceptedPledgeAsync(userId);
        if (hasAccepted)
        {
            // Already accepted, redirect to dashboard
            Navigation.NavigateTo("/student/dashboard", true);
        }
    }

    private async Task HandleAcceptPledge()
    {
        if (!isAccepted)
        {
            errorMessage = "يجب الموافقة على الميثاق للمتابعة";
            return;
        }

        try
        {
            isProcessing = true;
            errorMessage = "";

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = Guid.Parse(authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? Guid.Empty.ToString());

            await UserService.AcceptPledgeAsync(userId);

            // Redirect to dashboard
            Navigation.NavigateTo("/student/dashboard", true);
        }
        catch (Exception ex)
        {
            errorMessage = $"حدث خطأ: {ex.Message}";
            isProcessing = false;
        }
    }
}
