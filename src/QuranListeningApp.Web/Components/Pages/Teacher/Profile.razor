@page "/teacher/profile"
@layout TeacherLayout
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Teacher")]
@using QuranListeningApp.Application.Services
@using QuranListeningApp.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject UserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="profile-container">
    <!-- Page Header with Back Button -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h3 class="mb-0">
                    <i class="fas fa-user me-2"></i>
                    الملف الشخصي
                </h3>
                <p class="text-muted mb-0">إدارة الملف الشخصي والمعلومات</p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>
                العودة
            </button>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header">
            <h4 class="mb-0">
                <i class="bi bi-person-circle"></i> الملف الشخصي
            </h4>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = "")"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle-fill"></i> @successMessage
                    <button type="button" class="btn-close" @onclick="@(() => successMessage = "")"></button>
                </div>
            }

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">الاسم الكامل: <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" @bind="fullName" placeholder="أدخل الاسم الكامل" />
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold">اسم المستخدم: <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" @bind="username" placeholder="أدخل اسم المستخدم" />
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold">رقم الهوية:</label>
                    <input type="text" class="form-control" @bind="idNumber" placeholder="أدخل رقم الهوية" />
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold">رقم الهاتف:</label>
                    <input type="text" class="form-control" @bind="phoneNumber" placeholder="05xxxxxxxx" />
                </div>

                <div class="col-12">
                    <hr />
                    <h5 class="mb-3">
                        <i class="bi bi-key"></i> تغيير كلمة المرور
                        <small class="text-muted">(اختياري - اترك فارغاً للإبقاء على كلمة المرور الحالية)</small>
                    </h5>
                </div>

                <div class="col-md-4">
                    <label class="form-label fw-bold">كلمة المرور الحالية:</label>
                    <input type="password" class="form-control" @bind="currentPassword" placeholder="كلمة المرور الحالية" />
                </div>

                <div class="col-md-4">
                    <label class="form-label fw-bold">كلمة المرور الجديدة:</label>
                    <input type="password" class="form-control" @bind="newPassword" placeholder="كلمة المرور الجديدة" />
                </div>

                <div class="col-md-4">
                    <label class="form-label fw-bold">تأكيد كلمة المرور:</label>
                    <input type="password" class="form-control" @bind="confirmPassword" placeholder="تأكيد كلمة المرور" />
                </div>

                <div class="col-12">
                    <div class="form-text">
                        <i class="bi bi-info-circle"></i> كلمة المرور يجب أن تكون 6 أحرف على الأقل
                    </div>
                </div>
            </div>

            <div class="d-flex gap-2 justify-content-start mt-4">
                <button class="btn btn-primary btn-lg" @onclick="SaveProfile" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-save"></i> حفظ التغييرات
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .profile-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 24px 16px;
    }

    .card-header {
        background: linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%);
        color: white;
        padding: 16px 24px;
        border-radius: 8px 8px 0 0;
    }

    .card-header h4 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .card {
        border: none;
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    }

    .card-body {
        padding: 24px;
    }

    .form-label {
        color: #333;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 6px;
        padding: 12px 16px;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%);
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .alert {
        border-radius: 6px;
        padding: 12px 16px;
        margin-bottom: 20px;
    }

    .page-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .page-header h3 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
        color: #495057;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .profile-container {
            padding: 16px 8px;
        }
        
        .card-body {
            padding: 16px;
        }
    }
</style>

@code {
    private Guid currentUserId;
    private string fullName = "";
    private string username = "";
    private string idNumber = "";
    private string phoneNumber = "";
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private string successMessage = "";
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserId = Guid.Parse(authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? Guid.Empty.ToString());
        
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            var user = await UserService.GetUserByIdAsync(currentUserId);
            if (user != null)
            {
                fullName = user.FullNameArabic;
                username = user.Username;
                idNumber = user.IdNumber ?? "";
                phoneNumber = user.PhoneNumber ?? "";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"خطأ في تحميل بيانات المستخدم: {ex.Message}";
        }
    }

    private async Task SaveProfile()
    {
        errorMessage = "";
        successMessage = "";

        // Validate basic info
        if (string.IsNullOrWhiteSpace(fullName))
        {
            errorMessage = "يجب إدخال الاسم الكامل";
            return;
        }

        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "يجب إدخال اسم المستخدم";
            return;
        }

        if (username.Length < 3)
        {
            errorMessage = "اسم المستخدم يجب أن يكون 3 أحرف على الأقل";
            return;
        }

        // Validate password change if requested
        bool changePassword = !string.IsNullOrWhiteSpace(currentPassword) || 
                             !string.IsNullOrWhiteSpace(newPassword) || 
                             !string.IsNullOrWhiteSpace(confirmPassword);

        if (changePassword)
        {
            if (string.IsNullOrWhiteSpace(currentPassword))
            {
                errorMessage = "يجب إدخال كلمة المرور الحالية";
                return;
            }

            if (string.IsNullOrWhiteSpace(newPassword))
            {
                errorMessage = "يجب إدخال كلمة المرور الجديدة";
                return;
            }

            if (newPassword.Length < 6)
            {
                errorMessage = "كلمة المرور الجديدة يجب أن تكون 6 أحرف على الأقل";
                return;
            }

            if (newPassword != confirmPassword)
            {
                errorMessage = "كلمة المرور الجديدة وتأكيد كلمة المرور غير متطابقين";
                return;
            }

            // Verify current password
            var isValid = await UserService.ValidatePasswordAsync(username, currentPassword);
            if (!isValid)
            {
                errorMessage = "كلمة المرور الحالية غير صحيحة";
                return;
            }
        }

        try
        {
            isSaving = true;

            var user = await UserService.GetUserByIdAsync(currentUserId);
            if (user == null)
            {
                errorMessage = "لم يتم العثور على المستخدم";
                return;
            }

            // Update basic info
            user.FullNameArabic = fullName.Trim();
            user.Username = username.Trim();
            user.IdNumber = string.IsNullOrWhiteSpace(idNumber) ? null : idNumber.Trim();
            user.PhoneNumber = string.IsNullOrWhiteSpace(phoneNumber) ? null : phoneNumber.Trim();

            // Update password if requested
            if (changePassword && !string.IsNullOrWhiteSpace(newPassword))
            {
                user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(newPassword);
            }

            await UserService.UpdateUserAsync(user, currentUserId);

            successMessage = "تم حفظ التغييرات بنجاح";
            
            // Clear password fields
            currentPassword = "";
            newPassword = "";
            confirmPassword = "";
        }
        catch (Exception ex)
        {
            errorMessage = $"خطأ في حفظ التغييرات: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack() => Navigation.NavigateTo("/teacher/dashboard");
}
